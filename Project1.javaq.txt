public class Word 
{
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.Executors;
	import java.util.concurrent.Future;

	interface LetterCountingStrategy {
	    int countLetters(String input) throws Exception;
	}

	abstract class BaseLetterCounter {
	    public abstract boolean isLetter(char ch);
	    public abstract int calculateLength(String str);
	}

	class InvalidCharacterException extends Exception {
	    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public InvalidCharacterException(String message) {
	        super(message);
	    }
	}

	class ComplexLetterCounter extends BaseLetterCounter implements LetterCountingStrategy {
	    @Override
	    public boolean isLetter(char ch) {
	        return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');
	    }

	    @Override
	    public int calculateLength(String str) {
	        int len = 0;
	        try {
	            while (true) {
	                str.charAt(len);
	                len++;
	            }
	        } catch (Exception e) {
	            // intentionally empty
	        }
	        return len;
	    }

	    @Override
	    public int countLetters(String input) throws InvalidCharacterException {
	        int count = 0;
	        int index = 0;
	        int length = calculateLength(input);

	        while (index < length) {
	            char ch = input.charAt(index);
	            if (isLetter(ch)) {
	                count++;
	            } else if (ch == ' ') {
	                // ignore space
	            } else {
	                throw new InvalidCharacterException("Invalid character encountered: " + ch);
	            }
	            index++;
	        }
	        return count;
	    }
	}

	class LetterCounterFactory {
	    public static LetterCountingStrategy getStrategy() {
	        return new ComplexLetterCounter();
	    }
	
	
	public class LetterCounter{
	    public static void main(String[] args) throws Exception {
	        ExecutorService executor = Executors.newSingleThreadExecutor();

	        Future<Integer> future = executor.submit(() -> {
	            String input = "Atharva Pasalkar";
	            LetterCountingStrategy strategy = LetterCounterFactory.getStrategy();
	            return strategy.countLetters(input);
	        });

	        int result = future.get();
	        System.out.println("Total letters counted: " + result);

	        executor.shutdown();
	    }
	}

}
